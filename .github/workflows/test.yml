name: Get WandB Run Artifacts
on:
  issue_comment:
    types: [created]

jobs:
  get-run-artifacts:
    # Condition to run only on PR comments with the specific trigger phrase
    if: github.event.issue.pull_request != null && startsWith(github.event.comment.body, '/wandb_get_artifact')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract Run ID from comment
        id: extract_run_id
        run: |
          # Debug: Show the raw comment body
          echo "Raw comment body: '${{ github.event.comment.body }}'"
          
          # Clean the comment body (remove potential carriage returns and extra whitespace)
          COMMENT_BODY=$(echo "${{ github.event.comment.body }}" | tr -d '\r' | xargs)
          echo "Cleaned comment body: '$COMMENT_BODY'"
          
          # Extract everything after '/wandb_get_artifact ' (with space)
          if [[ "$COMMENT_BODY" =~ ^/wandb_get_artifact[[:space:]]+([^[:space:]]+).*$ ]]; then
            RUN_ID="${BASH_REMATCH[1]}"
            echo "Extracted Run ID: '$RUN_ID'"
            
            # Validate run ID (should be alphanumeric with possible hyphens/underscores)
            if [[ "$RUN_ID" =~ ^[a-zA-Z0-9_-]+$ ]]; then
              echo "run_id=$RUN_ID" >> $GITHUB_OUTPUT
              echo "parse_error=false" >> $GITHUB_OUTPUT
              echo "‚úÖ Successfully extracted valid Run ID: $RUN_ID"
            else
              echo "‚ùå Invalid Run ID format: $RUN_ID"
              echo "parse_error=true" >> $GITHUB_OUTPUT
            fi
          else
            echo "‚ùå Could not extract Run ID from comment"
            echo "parse_error=true" >> $GITHUB_OUTPUT
          fi
          
          # Create error message if parsing failed
          if [[ "${{ steps.extract_run_id.outputs.parse_error }}" != "false" ]]; then
            cat > artifact_summary.md << 'EOF'
### ‚ö†Ô∏è Invalid Command Format

**Issue:** Could not extract a valid Run ID from your comment.

**Your comment:** `${{ github.event.comment.body }}`

**Expected format:** `/wandb_get_artifact <run_id>`

**Examples:**
- `/wandb_get_artifact msl21o9b`
- `/wandb_get_artifact abc123def`

**Requirements:**
- Run ID should contain only letters, numbers, hyphens, and underscores
- There should be a space between the command and the run ID
- No extra spaces or special characters in the run ID
EOF
          fi
        shell: bash

      - name: Setup Python
        if: steps.extract_run_id.outputs.parse_error == 'false'
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          
      - name: Install wandb library
        if: steps.extract_run_id.outputs.parse_error == 'false'
        run: pip install wandb pandas

      - name: Create Python script for fetching artifacts
        if: steps.extract_run_id.outputs.parse_error == 'false'
        run: |
          cat > wandb_artifact_script.py << 'SCRIPT_EOF'
          import os
          import wandb
          import pandas as pd
          from datetime import datetime
          import traceback

          # Get environment variables
          run_id = os.environ.get("WANDB_RUN_ID") 
          entity = os.environ.get("WANDB_ENTITY")
          project = os.environ.get("WANDB_PROJECT")

          output_file = "artifact_summary.md"

          def format_size(size_bytes):
              if size_bytes is None: return "N/A"
              if size_bytes == 0: return "0B"
              size_name = ("B", "KB", "MB", "GB", "TB")
              import math
              i = int(math.floor(math.log(size_bytes, 1024)))
              p = math.pow(1024, i)
              s = round(size_bytes / p, 2)
              return f"{s} {size_name[i]}"

          def generate_artifact_report():
              print(f"üîç Fetching artifacts for Run ID: {run_id}")
              print(f"üìä Project: {entity}/{project}")
              
              if not all([run_id, entity, project]):
                  missing = []
                  if not run_id: missing.append("WANDB_RUN_ID")
                  if not entity: missing.append("WANDB_ENTITY") 
                  if not project: missing.append("WANDB_PROJECT")
                  
                  with open(output_file, "w") as f:
                      f.write("### ‚ö†Ô∏è Configuration Error\n\n")
                      f.write(f"Missing required environment variables: `{', '.join(missing)}`\n\n")
                      f.write("**Required GitHub Secrets:**\n")
                      f.write("- `WANDB_API_KEY`: Your W&B API key\n")
                      f.write("- `WANDB_ENTITY`: Your W&B username or team name\n")
                      f.write("- `WANDB_PROJECT`: Your W&B project name\n")
                  print(f"‚ùå Error: Missing environment variables: {missing}")
                  return

              try:
                  print("üîë Initializing W&B API...")
                  api = wandb.Api(timeout=60)
                  
                  print(f"üì° Fetching run: {entity}/{project}/{run_id}")
                  run = api.run(f"{entity}/{project}/{run_id}")
                  print(f"‚úÖ Successfully fetched run: {run.name} (ID: {run.id})")
                  
                  # Fetch logged artifacts
                  print("üè∫ Fetching artifacts...")
                  artifacts = run.logged_artifacts()
                  print(f"üì¶ Found {len(artifacts)} artifacts")
                  
                  with open(output_file, "w") as f:
                      f.write(f"# üè∫ Artifact Report for W&B Run: `{run.name}`\n\n")
                      f.write(f"| **Field** | **Value** |\n")
                      f.write(f"|-----------|----------|\n")
                      f.write(f"| **Run ID** | `{run.id}` |\n")
                      f.write(f"| **Project** | `{entity}/{project}` |\n")
                      f.write(f"| **Created** | {run.created_at} |\n")
                      f.write(f"| **State** | {run.state} |\n")
                      f.write(f"| **Artifacts** | {len(artifacts)} |\n\n")
                      
                      if not artifacts:
                          f.write("## ‚ÑπÔ∏è No Artifacts Found\n\n")
                          f.write("This run does not have any logged artifacts.\n\n")
                          f.write("**Possible reasons:**\n")
                          f.write("- The run hasn't logged any artifacts yet\n")
                          f.write("- Artifacts were logged to a different run\n")
                          f.write("- The run is still in progress\n")
                      else:
                          f.write(f"## üìú Artifacts Summary ({len(artifacts)})\n\n")
                          
                          for idx, artifact in enumerate(artifacts):
                              f.write(f"### {idx+1}. `{artifact.name}` \n\n")
                              f.write(f"| **Property** | **Value** |\n")
                              f.write(f"|--------------|----------|\n")
                              f.write(f"| **Type** | `{artifact.type}` |\n")
                              f.write(f"| **Version** | `{artifact.version}` |\n")
                              f.write(f"| **ID** | `{artifact.id}` |\n")
                              f.write(f"| **Digest** | `{artifact.digest[:12]}...` |\n")
                              f.write(f"| **Size** | {format_size(artifact.size)} |\n")
                              f.write(f"| **Created** | {artifact.created_at} |\n")
                              
                              if artifact.description:
                                  f.write(f"| **Description** | {artifact.description} |\n")
                              
                              f.write(f"\n")
                              
                              if artifact.metadata:
                                  f.write("**Metadata:**\n")
                                  for k, v in artifact.metadata.items():
                                      f.write(f"- `{k}`: `{v}`\n")
                                  f.write("\n")
                              
                              # File contents preview
                              try:
                                  if artifact.manifest and len(artifact.manifest.entries) > 0:
                                      f.write("**Files:**\n")
                                      file_count = 0
                                      for entry_name, entry in artifact.manifest.entries.items():
                                          if file_count >= 5:  # Limit to first 5 files
                                              f.write(f"- ... and {len(artifact.manifest.entries) - 5} more files\n")
                                              break
                                          f.write(f"- `{entry_name}` ({format_size(entry.size)})\n")
                                          file_count += 1
                                      f.write("\n")
                              except Exception as preview_e:
                                  print(f"‚ö†Ô∏è Could not list files for {artifact.name}: {preview_e}")
                              
                              # Construct artifact URL (more robust)
                              try:
                                  base_url = run.url.split('/runs/')[0]  # Get base project URL
                                  artifact_url = f"{base_url}/artifacts/{artifact.type}/{artifact.name}/{artifact.version}"
                                  f.write(f"**[‚û°Ô∏è View on W&B]({artifact_url})**\n\n")
                              except:
                                  f.write(f"**[‚û°Ô∏è View Run on W&B]({run.url})**\n\n")
                              
                              f.write("---\n\n")
                      
                      f.write(f"\n*üìÖ Report generated at {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')} UTC*\n")
                      f.write(f"*üîó [View full run details on W&B]({run.url})*\n")

                  print(f"‚úÖ Artifact report generated successfully")

              except Exception as e:
                  print(f"‚ùå Error occurred: {str(e)}")
                  print("üìã Full traceback:")
                  traceback.print_exc()
                  
                  with open(output_file, "w") as f:
                      f.write(f"### ‚ùå Error Fetching Artifacts\n\n")
                      f.write(f"**Run ID:** `{run_id}`\n")
                      f.write(f"**Project:** `{entity}/{project}`\n\n")
                      f.write(f"**Error Details:**\n")
                      f.write(f"```\n{str(e)}\n```\n\n")
                      f.write("**Common Issues:**\n")
                      f.write("- Run ID doesn't exist or is incorrect\n")
                      f.write("- Insufficient permissions (check WANDB_API_KEY)\n")
                      f.write("- Wrong entity/project combination\n")
                      f.write("- Network connectivity issues\n\n")
                      f.write("**Troubleshooting:**\n")
                      f.write("1. Verify the run ID exists in your W&B project\n")
                      f.write("2. Check that WANDB_ENTITY and WANDB_PROJECT are correct\n")
                      f.write("3. Ensure WANDB_API_KEY has proper permissions\n")

          if __name__ == "__main__":
              generate_artifact_report()
          SCRIPT_EOF

      - name: Execute Python script to fetch artifacts
        if: steps.extract_run_id.outputs.parse_error == 'false'
        env:
          WANDB_API_KEY: ${{ secrets.WANDB_API_KEY }}
          WANDB_ENTITY: ${{ secrets.WANDB_ENTITY }}
          WANDB_PROJECT: ${{ secrets.WANDB_PROJECT }}
          WANDB_RUN_ID: ${{ steps.extract_run_id.outputs.run_id }}
        run: python wandb_artifact_script.py
        
      - name: Debug - Display generated content
        if: always()
        run: |
          echo "üîç Debug Information:"
          echo "- Extracted Run ID: ${{ steps.extract_run_id.outputs.run_id }}"
          echo "- Parse Error: ${{ steps.extract_run_id.outputs.parse_error }}"
          echo ""
          echo "üìÑ Generated artifact_summary.md:"
          echo "===================="
          if [ -f artifact_summary.md ]; then
            cat artifact_summary.md
          else
            echo "‚ùå artifact_summary.md not found"
          fi
          echo "===================="
          
      - name: Install GitHub CLI
        run: |
          sudo apt-get update -y
          sudo apt-get install -y gh
          
      - name: Comment on PR with Artifact Summary
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.issue.number }}
        run: |
          echo "üí¨ Commenting on PR #$PR_NUMBER"
          if [ -f artifact_summary.md ]; then
            gh pr comment $PR_NUMBER --body-file artifact_summary.md
            echo "‚úÖ Successfully commented on PR #$PR_NUMBER"
          else
            echo "‚ùå artifact_summary.md not found, posting error comment"
            gh pr comment $PR_NUMBER --body "‚ùå **Error:** Could not generate W&B artifact report. Check the action logs for details."
            exit 1
          fi