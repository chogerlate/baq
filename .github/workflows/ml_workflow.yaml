name: Get WandB Runs

on:
  issue_comment:

jobs:
  get-runs:
    if: github.event.issue.pull_request != null && contains(github.event.comment.body, '/wandb_list_model')
    runs-on: ubuntu-latest

    steps:
      - name: Get the latest SHA for the PR that was commented on
        id: chatops
        uses: machine-learning-apps/actions-chatops@master
        with:
          TRIGGER_PHRASE: "/wandb_list_model"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install wandb
        run: pip install wandb

      - name: Fetch and comment WandB runs
        env:
          WANDB_API_KEY: ${{ secrets.WANDB_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SHA: ${{ steps.chatops.outputs.SHA }}
          ENTITY: ${{ secrets.WANDB_ENTITY }}
          PROJECT: ${{ secrets.WANDB_PROJECT }}
          PR_NUMBER: ${{ github.event.issue.number }}
          REPO: ${{ github.repository }}
        run: |
          python3 <<EOF
          import os
          import wandb
          import requests

          wandb.login(key=os.getenv("WANDB_API_KEY"))

          api = wandb.Api()
          runs = api.runs(f"{os.getenv('ENTITY')}/{os.getenv('PROJECT')}", {"config.github_sha": os.getenv("SHA")})

          if not runs:
              comment = "No WandB runs found for this commit."
          else:
              lines = ["## ðŸ“Š WandB Experiment Results"]
              for run in runs:
                  lines.append(f"### Run: [{run.name}]({run.url})")
                  metrics = run.summary
                  for key in ['accuracy', 'loss', 'best_val_acc', 'best_val_loss', '_runtime']:
                      if key in metrics:
                          lines.append(f"- **{key}**: `{metrics[key]}`")
                  lines.append("")  # Blank line between runs
              comment = "\n".join(lines)

          pr_number = os.getenv("PR_NUMBER")
          repo = os.getenv("REPO")
          url = f"https://api.github.com/repos/{repo}/issues/{pr_number}/comments"
          headers = {
              "Authorization": f"Bearer {os.getenv('GITHUB_TOKEN')}",
              "Accept": "application/vnd.github.v3+json"
          }
          response = requests.post(url, json={"body": comment}, headers=headers)
          if response.status_code != 201:
              raise Exception(f"Failed to post comment: {response.status_code}, {response.text}")
          EOF
