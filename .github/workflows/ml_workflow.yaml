name: Get WandB Runs

on:
  issue_comment:

jobs:
  get-runs:
    if: github.event.issue.pull_request != null && contains(github.event.comment.body, '/wandb_list_model')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install wandb
        run: pip install wandb

      - name: Create Python script
        run: |
          cat > wandb_script.py << 'EOF'
          import os
          import wandb

          entity = os.environ["WANDB_ENTITY"]
          project = os.environ["WANDB_PROJECT"]

          api = wandb.Api()
          runs = api.runs(f"{entity}/{project}")
          runs = sorted(runs, key=lambda x: x.created_at, reverse=True)[:10]

          def get_performance_emoji(accuracy):
              if accuracy is None:
                  return "❓"
              if accuracy >= 0.95:
                  return "🏆"
              elif accuracy >= 0.90:
                  return "🥇"
              elif accuracy >= 0.85:
                  return "🥈"
              elif accuracy >= 0.80:
                  return "🥉"
              elif accuracy >= 0.70:
                  return "👍"
              else:
                  return "⚠️"

          def format_runtime(runtime_seconds):
              if runtime_seconds is None:
                  return "N/A"
              if runtime_seconds < 60:
                  return f"{runtime_seconds:.1f}s"
              elif runtime_seconds < 3600:
                  return f"{runtime_seconds/60:.1f}m"
              else:
                  return f"{runtime_seconds/3600:.1f}h"

          with open("wandb_summary.md", "w") as f:
              f.write(f"# 📋 Latest 10 Model Runs from W&B\n\n")
              f.write("| Model | Performance | Accuracy | Loss | Runtime | Status | Link |\n")
              f.write("|-------|-------------|----------|------|---------|--------|------|\n")

              for run in runs:
                  accuracy = run.summary.get('accuracy') or run.summary.get('best_val_acc') or run.summary.get('val_accuracy')
                  loss = run.summary.get('loss') or run.summary.get('best_val_loss') or run.summary.get('val_loss')
                  runtime = run.summary.get('_runtime')
                  emoji = get_performance_emoji(accuracy)
                  acc_str = f"{accuracy:.3f}" if accuracy else "N/A"
                  loss_str = f"{loss:.4f}" if loss else "N/A"
                  runtime_str = format_runtime(runtime)
                  status = "✅" if run.state == "finished" else "🔄" if run.state == "running" else "❌"
                  f.write(f"| **{run.name}** | {emoji} | {acc_str} | {loss_str} | {runtime_str} | {status} | [View]({run.url}) |\n")

              f.write("\n---\n")
              f.write("*Generated by GitHub Action 🤖*\n")
          print("✅ wandb_summary.md generated")
          EOF

      - name: Run wandb_script.py
        env:
          WANDB_API_KEY: ${{ secrets.WANDB_API_KEY }}
          WANDB_ENTITY: ${{ secrets.WANDB_ENTITY }}
          WANDB_PROJECT: ${{ secrets.WANDB_PROJECT }}
        run: python wandb_script.py

      - name: Show generated markdown
        run: cat wandb_summary.md

      - name: Install GitHub CLI
        run: |
          sudo apt update
          sudo apt install gh -y

      - name: Comment on PR
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr comment ${{ github.event.issue.number }} --body-file wandb_summary.md
